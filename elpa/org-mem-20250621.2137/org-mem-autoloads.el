;;; org-mem-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from indexed.el

(register-definition-prefixes "indexed" '("indexed--"))


;;; Generated autoloads from org-mem.el

(register-definition-prefixes "org-mem" '("org-mem-"))


;;; Generated autoloads from org-mem-db1.el

(defvar org-mem-db1-mode nil "\
Non-nil if Org-Mem-Db1 mode is enabled.
See the `org-mem-db1-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-mem-db1-mode'.")
(custom-autoload 'org-mem-db1-mode "org-mem-db1" nil)
(autoload 'org-mem-db1-mode "org-mem-db1" "\
Make available the `org-mem-db1' database.

This is a global minor mode.  If called interactively, toggle the
`Org-Mem-Db1 mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-mem-db1-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'org-mem-db1 "org-mem-db1" "\
Return the SQLite handle.
Each call checks if it is alive, and renews if not.

If arguments SQL and ARGS provided, pass to `sqlite-select'.

(fn &optional SQL &rest ARGS)")
(register-definition-prefixes "org-mem-db1" '("org-mem-db1--"))


;;; Generated autoloads from org-mem-list.el

(autoload 'org-mem-list-entries "org-mem-list" nil t)
(autoload 'org-mem-list-problems "org-mem-list" "\
List problems encountered while parsing." t)
(autoload 'org-mem-list-title-collisions "org-mem-list" "\
Pop up a buffer displaying title collisions between ID-nodes.
To automatically warn, set `org-mem-do-warn-title-collisions'." t)
(autoload 'org-mem-list-dead-id-links "org-mem-list" "\
List links that lead to no known ID." t)
(autoload 'org-mem-list-db-contents "org-mem-list" "\
Explore contents of currently used SQLite DB.

With optional argument DB, explore that database connection
instead of default `org-mem-roamy--connection'.

(fn &optional DB)" t)
(register-definition-prefixes "org-mem-list" '("org-mem-list--goto-"))


;;; Generated autoloads from org-mem-parser.el

(register-definition-prefixes "org-mem-parser" '("org-mem-parser--"))


;;; Generated autoloads from org-mem-roamy.el

(defvar org-mem-roamy-db-mode nil "\
Non-nil if Org-Mem-Roamy-Db mode is enabled.
See the `org-mem-roamy-db-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-mem-roamy-db-mode'.")
(custom-autoload 'org-mem-roamy-db-mode "org-mem-roamy" nil)
(autoload 'org-mem-roamy-db-mode "org-mem-roamy" "\
Instantiate an `org-mem-roamy-db' database and keep it updated.

May slow down \\[org-mem-reset].
See also user option `org-mem-roamy-do-overwrite-real-db'.

This is a global minor mode.  If called interactively, toggle the
`Org-Mem-Roamy-Db mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-mem-roamy-db-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-mem-roamy" '("org-mem-roamy-"))


;;; Generated autoloads from org-mem-updater.el

(defvar org-mem-updater-mode nil "\
Non-nil if Org-Mem-Updater mode is enabled.
See the `org-mem-updater-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-mem-updater-mode'.")
(custom-autoload 'org-mem-updater-mode "org-mem-updater" nil)
(autoload 'org-mem-updater-mode "org-mem-updater" "\
Keep Org-mem cache up to date.

This is a global minor mode.  If called interactively, toggle the
`Org-Mem-Updater mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-mem-updater-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "org-mem-updater" '("org-mem-updater-"))

;;; End of scraped data

(provide 'org-mem-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; org-mem-autoloads.el ends here
