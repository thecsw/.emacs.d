;;; uniline-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from uniline.el

(autoload 'uniline-mode "uniline" "\
Minor mode to draw lines, boxes, & arrows using UNICODE characters.

                ┏━━━━━━━┓
        ┏━━━━◀━━┫ thick ┣═◁═╗
    ╭───┸──╮    ┃ box   ┃   ║
    │ thin │    ┗━━┯━━━━┛   ║
    │ box  ├───●───╯ ╔══════╩═╗
    ╰───┬──╯   ╰─────╢ double ║
        ╰───────▷────╢ box    ║
                     ╚════════╝
     here╶──────────────╮
                        ↓
     △ ╭────────╮ ┏━━━━━┷━━━━━┓
   A │ │ A+X    │ ┃ A+Y       ┃
     │ │        │ ┃           ┃
     ▽ ╰────────╯ ┗━━━━━━━━━━━┛
     △ ╭────────╮ ╭───────────╮
   B │ │ B+X    │ │ B+Y       │
     ▽ ╰────────╯ ╰───────────╯
       ◀━━━━━━━━▶◀━━━━━━━━━━━━▶
           X           Y

    v △      ▗▖         ▗
    a │   ▗▟▄▟██▖   ▗▄▄▟█
    l │ ▐▄███████▄ ▟█████▙ ▄▖
    u─┴╴▝▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
    e   ├───time────────────▷

╭─Keyboard arrows────────────╴
│ Use keyboard arrows to draw lines ╭─┲━╦═╗
│ Use control-arrows to overwrite whatever was there
│ Use shift-arrows to extend the selection (or start a selection)
╰────────────────────────────╴
╭─Brush style────────────────╴\\<uniline-mode-map>
│ \\[uniline-set-brush-1]	for thin   lines	╭─┬─╮
│ \\[uniline-set-brush-2]	for thick  lines	┏━┳━┓
│ \\[uniline-set-brush-3]	for double lines	╔═╦═╗
│ \\[uniline-set-brush-block]	for blocks		▙▄▟▀
│ \\[uniline-set-brush-0]	to erase lines
│ \\[uniline-set-brush-nil]	to move cursor without drawing
╰────────────────────────────╴
╭─Glyphs (region inactive)───╴
│ \\[uniline-launch-interface] when there is NO region highlighted,
│ enter a sub-mode to draw a single character glyph,
│ and change its orientation.
├─Intersection glyphs────────╴
│ \\`a' or \\`A' arrows ▷ ▶ → ▹ ▸ ↔
│ \\`s' or \\`S' squares  □ ■ ◇ ◆ ◊
│ \\`o' or \\`O' circles  · ● ◦ Ø ø
│ \\`x' or \\`X' crosses  ╳ ÷ × ± ¤
│ Shifting the key cycles backward
├─Arrow direction────────────╴
│ \\`S-<right>' point arrow → right
│ \\`S-<left>'  point arrow ← left
│ \\`S-<up>'    point arrow ↑ up
│ \\`S-<down>'  point arrow ↓ down
├─Tweak 1/4 line─────────────╴
│ \\`S-<right>' change ¼ line → right
│ \\`S-<left>'  change ¼ line ← left
│ \\`S-<up>'    change ¼ line ↑ up
│ \\`S-<down>'  change ¼ line ↓ down
├─Text direction─────────────╴
│ Usually when typing text, cursor moves to the right.
│ \\`C-<right>' text goes right→
│ \\`C-<left>'  text goes left ←
│ \\`C-<up>'    text goes up   ↑
│ \\`C-<down>'  text goes down ↓
├─Insert characters──────────╴
│ In this sub-mode, the keys \\`-' \\`+' \\`=' \\`#' recover their
│ basic meaning, which is to insert this character.
├─Other──────────────────────╴
│ \\`f' enter the fonts sub-menu
│ \\`RET' or \\`q' exits the sub-mode
│ Any other key exits the sub-mode and do whatever they
│ are intended for.
╰────────────────────────────╴
╭─Rectangles (region active)─╴
│ \\[uniline-launch-interface] when region IS highlighted,
│ enter a sub-mode to handle rectangles,
│ marked by the highlighted region.
├─Move rectangle─────────────╴
│ \\`S-<right>' move rectangle → right
│ \\`S-<left>'  move rectangle ← left 
│ \\`S-<up>'    move rectangle ↑ up   
│ \\`S-<down>'  move rectangle ↓ down 
├─Draw rectangle─────────────╴
│ \\`r'     draw      an inner rectangle
│ \\`R'     draw      an outer rectangle
│ \\`C-r'   overwrite an inner rectangle
│ \\`C-S-R' overwrite an outer rectangle
├─Fill───────────────────────╴
│ \\`i'	fill region with a character
├─Other──────────────────────╴
│ \\`C-_', \\`C-/', \\`C-x u' undo works outside selection
│ \\`RET', \\`q' exit the rectangle sub-mode
│ Any other key exits the sub-mode and do whatever they
│ are intended for.
╰────────────────────────────╴
╭╴Macros─────────────────────╴
│ Usual Emacs macros recording works as usual
│ Last keybord macro can be twisted in any of the 4 directions
│ \\[uniline-macro-exec] then \\`→' \\`←' \\`↑' \\`↓': directional call of last keyboard macro
╰────────────────────────────╴
╭╴Alternate styles───────────╴
│ Highlight a region (a rectangle) then \\[uniline-launch-interface] \\`s'
│ This enters a menu where alternative styles are applied
│ to the rectangular selection
│ \\`3' make 3 dots vertical, 2 dots horizontal lines
│ \\`4' make 4 dots vertical and horizontal lines
│ \\`h' convert round corners to hard ones
│ \\`-' make thin lines
│ \\`+' make thick lines
│ \\`=' make double lines
│ \\`0' come back to standard base line style, including from ASCII art
│ \\`a' apply external package aa2u conversion from ASCII art to UNICODE
╰────────────────────────────╴
╭─Fonts──────────────────────╴
│ Try out some mono-spaced fonts with support for the
│ required UNICODE characters.
│ \\[uniline-launch-interface] \\`f' enters a sub-menu to change the font
│ type the first letter of the font name.
│ This setting is just for the current Emacs session.
│ \\`*' customize default font for future sessions.
╰────────────────────────────╴
╭─Toggle hint sizes──────────╴
│ This is for changing the height of Hydra menus,
│ between multiline to single-line and back,
│ \\[uniline-toggle-hydra-hints-welcome] in base Uniline mode
│ \\`TAB' in a \\[uniline-launch-interface]-activated menu
╰────────────────────────────╴
╭─Quit───────────────────────╴\\<uniline-mode-map>
│ \\[uniline-mode] quit the Uniline minor mode.
│ The state of the buffer (ex: `overwrite-mode' and cursor shape)
│ will return to what it was prior to entering `uniline-mode'
╰────────────────────────────╴

 Documentation here: (info \"uniline\")

This is a minor mode.  If called interactively, toggle the
`Uniline mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `uniline-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "uniline" '("uniline-"))

;;; End of scraped data

(provide 'uniline-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; uniline-autoloads.el ends here
