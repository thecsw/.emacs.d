;;; string-inflection-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from string-inflection.el

(autoload 'string-inflection-ruby-style-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => foo_bar" t)
(autoload 'string-inflection-elixir-style-cycle "string-inflection" "\
foo_bar => FooBar => foo_bar" t)
(autoload 'string-inflection-python-style-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => foo_bar" t)
(autoload 'string-inflection-java-style-cycle "string-inflection" "\
fooBar => FOO_BAR => FooBar => fooBar" t)
(autoload 'string-inflection-all-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => fooBar => foo-bar => Foo_Bar => foo_bar

At first glance, this method may seem convenient, but in reality, it was created solely for testing purposes during development. Its role is to verify that all transformation patterns are properly traversed, and it was never intended for regular use. In fact, the developers themselves do not use it at all and strongly discourage its use.

Using this method in practice leads to unnecessary stress, as it forces traversal through every possible transformation pattern, making the conversion process excessively long. Moreover, under the current default settings, the method may not even complete a full cycle depending on the mode in use.

For example, in modes where hyphens are not considered part of variable names, a string like `foo-bar' will be split into `foo' and `bar', and the transformation will only proceed on `bar'. This means the intended conversion process can be interrupted midway depending on the context.

For these reasons, this method should not be used as part of your regular workflow. It is strictly meant for internal verification during development, and we advise against using it in day-to-day usage." t)
(autoload 'string-inflection-toggle "string-inflection" "\
toggle foo_bar <=> FooBar" t)
(autoload 'string-inflection-camel-case "string-inflection" "\
FooBar format" t)
(autoload 'string-inflection-lower-camel-case "string-inflection" "\
fooBar format" t)
(autoload 'string-inflection-snake-case "string-inflection" "\
foo_bar format" t)
(autoload 'string-inflection-capital-snake-case "string-inflection" "\
Foo_Bar format" t)
(autoload 'string-inflection-upcase "string-inflection" "\
FOO_BAR format" t)
(autoload 'string-inflection-kebab-case "string-inflection" "\
foo-bar format" t)
(register-definition-prefixes "string-inflection" '("string-inflection-"))

;;; End of scraped data

(provide 'string-inflection-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; string-inflection-autoloads.el ends here
