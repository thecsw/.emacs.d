;;; conda-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from conda.el

(autoload 'conda-env-deactivate "conda" "\
Deactivate the current conda env." t)
(autoload 'conda-env-activate "conda" "\
Switch to environment NAME, prompting if called interactively.

(fn &optional NAME)" t)
(autoload 'conda-env-activate-path "conda" "\
Switch to environment PATH, prompting if called interactively.

(fn &optional PATH)" t)
(autoload 'conda-env-list "conda" "\
List all available conda environments in a temp buffer." t)
(autoload 'conda-with-env-shell-command "conda" "\
With environment NAME active, execute the shell string COMMAND.

(fn NAME COMMAND)")
(autoload 'conda-env-shell-init "conda" "\
Activate the current env in a newly opened shell PROCESS.

(fn PROCESS)")
(autoload 'conda-env-eshell-prompt "conda" "\
An Eshell prompt function to insert the active Conda environment.")
(autoload 'conda-env-initialize-interactive-shells "conda" "\
Configure interactive shells for use with conda.el.")
(autoload 'conda-env-initialize-eshell "conda" "\
Configure eshell for use with conda.el.")
(autoload 'conda-env-activate-for-buffer "conda" "\
Activate the conda environment implied by the current buffer.

This can be set by a buffer-local or project-local variable (e.g. a
`.dir-locals.el` that defines `conda-project-env-path`), or inferred from an
environment YAML file or similar at the project level." t)
(autoload 'conda-env-yaml-process-for-buffer "conda" "\
Operate on conda environment defined by ENV-FILE, a YAML file.

When ENV-FILE is nil, it attempts to look it up in the parent directories
If not found it raises an error. When ENV-FILE is non-nil, or is found,
and REMOVE is nil, it calls a shell process to update environment,
or to create it if it doesn't yet exist.

If REMOVE is non-nil it attempts to remove the environment if exists,
or reports an error otherwise.

(fn &optional REMOVE ENV-FILE)" t)
(autoload 'conda-env-manage-for-buffer "conda" "\
Edit the Conda environment YAML file implied by the current buffer,
or create, update, remove environments using it.

If an environment YAML file named `conda-env-yaml-base-name' exists, then is used as the reference.

If called without \\[universal-argument] prefix, and an environment file exists, then opens it for editing.
If called without \\[universal-argument] prefix, and no environment file exists, then prompts for an
environment name, and generates a buffer for a new YAML file in the root directory of the current project,
or in the `default-directory'.

The newly generated environment YAML file takes its defaults from these variables:

- `conda-env-yaml-default-channels',
- `conda-env-yaml-default-dependencies',
- `conda-env-yaml-default-pip-dependencies'.

If file named `conda-pip-requirements-filename' exists in one of the parent
directories, then the generated file will be placed next to it instead,
and will be referenced directly for PIP dependencies, instead of using
the `conda-env-yaml-default-pip-dependencies' variable.

If called with one \\[universal-argument] prefix, and an environment file exists,
then updates the environment from the file, or creates it if not yet exists.

If called with two \\[universal-argument] prefix, it prompts for an environment
to be removed. In environment YAML file exists its name is used as default.

(fn &optional ARG)" t)
(defvar conda-env-autoactivate-mode nil "\
Non-nil if Conda-Env-Autoactivate mode is enabled.
See the `conda-env-autoactivate-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `conda-env-autoactivate-mode'.")
(custom-autoload 'conda-env-autoactivate-mode "conda" nil)
(autoload 'conda-env-autoactivate-mode "conda" "\
Toggle conda-env-autoactivate mode.

This mode automatically tries to activate a conda environment for the current
buffer.

This is a global minor mode.  If called interactively, toggle the
`Conda-Env-Autoactivate mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='conda-env-autoactivate-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "conda" '("conda-"))


;;; Generated autoloads from conda-projectile.el

(register-definition-prefixes "conda-projectile" '("conda-projectile-"))

;;; End of scraped data

(provide 'conda-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; conda-autoloads.el ends here
