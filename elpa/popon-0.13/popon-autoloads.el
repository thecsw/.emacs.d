;;; popon-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from popon.el

(autoload 'poponp "popon" "\
Return t if OBJECT is a popon.

(fn OBJECT)")
(autoload 'popon-live-p "popon" "\
Return t if OBJECT is a popon and not killed.

(fn OBJECT)")
(autoload 'popon-get "popon" "\
Get the PROP property of popon POPON.

(fn POPON PROP)")
(autoload 'popon-put "popon" "\
Set the PROP property of popon POPON to VALUE.

(fn POPON PROP VALUE)")
(autoload 'popon-properties "popon" "\
Return a copy the property list of popon POPON.

(fn POPON)")
(autoload 'popon-position "popon" "\
Return the position of popon POPON as a cons (X, Y).

When popon POPON is killed, return nil.

(fn POPON)")
(autoload 'popon-size "popon" "\
Return the size of popon POPON as a cons (WIDTH . HEIGHT).

When popon POPON is killed, return nil.

(fn POPON)")
(autoload 'popon-window "popon" "\
Return the window popon POPON belongs to.

Return nil if popon POPON is killed.

(fn POPON)")
(autoload 'popon-buffer "popon" "\
Return the buffer popon POPON belongs to.

Return nil if popon POPON is killed.

(fn POPON)")
(autoload 'popon-text "popon" "\
Return the text popon POPON is displaying.

POPON may be a killed popon.  Return nil if POPON isn't a popon at
all.

(fn POPON)")
(autoload 'popon-create "popon" "\
Create a popon showing TEXT at POS of WINDOW.

Display popon only if WINDOW is displaying BUFFER.

POS is a cons (X, Y), where X is column and Y is line in WINDOW.  TEXT
should be a string or a cons cell of form (STR . WIDTH).  When TEXT is
a string, each line of it should be of same length (i.e `string-width'
should return the same length for every line).  When TEXT is a cons
cell, STR is used as the text to display and each line of it should be
of visual length width.

PRIORITY is a number (integer or float) between -100 and 100.  Popons
with larger priority values are rendered first.

(fn TEXT POS &optional WINDOW BUFFER PRIORITY)")
(autoload 'popon-kill "popon" "\
Kill popon POPON.

Do nothing if POPON isn't a live popon.  Return nil.

(fn POPON)")
(autoload 'popon-redisplay "popon" "\
Redisplay popon overlays.")
(autoload 'popon-update "popon" "\
Update popons if needed.")
(autoload 'popon-x-y-at-posn "popon" "\
Return the (X, Y) coodinate at position POSN as a cons.

Return nil if a popon can't be shown at position POSN.

NOTE: This uses `posn-at-point', which is slow.  So try to minimize
calls to this function.

(fn POSN)")
(autoload 'popon-x-y-at-pos "popon" "\
Return the (X, Y) coodinate of POINT in selected window as a cons.

Return nil if POINT is not in visible text area.

NOTE: This uses `posn-at-point', which is slow.  So try to minimize
calls to this function.

(fn POINT)")
(autoload 'popon-kill-all "popon" "\
Kill all popons." t)
(register-definition-prefixes "popon" '("popon-"))

;;; End of scraped data

(provide 'popon-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; popon-autoloads.el ends here
