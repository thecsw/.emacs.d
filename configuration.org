#+HTML_HEAD: <link rel="stylesheet" href="https://sandyuraz.com/styles/org.min.css">

* MELPA
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC
* Coding styles
** C

#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 8
	      c-default-style "k&r"
	      tab-width 8
	      indent-tabs-mode t)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
(setq-default python-basic-offset 8
	      tab-width 8
	      indent-tabs-mode nil)
#+END_SRC
** HTML
#+BEGIN_SRC emacs-lisp
  (add-hook 'html-mode-hook
	    (lambda ()
	      ;; Default indentation is usually 2 spaces, changing to 4.
	      (set (make-local-variable 'sgml-basic-offset) 4)))

  (defun html-show-toc ()
    "Shows a TOC based on headings tags <H[1-6]>"
    (interactive)
    (if sgml-tags-invisible
	(error "SGML tags are invisible")
      (occur "<h[1-6]>")
      (pop-to-buffer "*Occur*")
      (vc-toggle-read-only)
      (goto-char (point-min))
      (replace-string "<h1>" "")
      (goto-char (point-min))
      (replace-string "<h2>" "  ")
      (goto-char (point-min))
      (replace-string "<h3>" "    ")
      (goto-char (point-min))
      (replace-string "<h4>" "      ")
      (goto-char (point-min))
      (replace-string "<h5>" "        ")
      (goto-char (point-min))
      (replace-string "<h6>" "          ")
      (goto-char (point-min))
      (replace-regexp "</h[1-6]>" "")
      (goto-char (point-min))
      (toggle-read-only 1)))

  (defun html-end-of-line ()
    "If there is an HTML tag at the end of the line, then go to start of tag.
   Otherwise go to the real end of the line."
    (interactive)
    (if (or (looking-at ".*>$") ; if we're on a line that ends with a tag
	    (and (= (char-before) 62)
		 (= (point) (save-excursion
			      (end-of-line)
			      (point))))) ; or we're at the end of a line
					  ; with a tag
	(let ((where-now (point)))
	  (narrow-to-region
	   (save-excursion
	     (beginning-of-line)
	     (point))
	   (save-excursion
	     (end-of-line)
	     (point)))
	  (end-of-line)
	  (re-search-backward "<" nil t)
	  (if (= (point) where-now)
	      (end-of-line))
	  (widen))
      (end-of-line)))

  (add-hook 'html-helper-mode-hook
	    (lambda ()
	      (define-key html-helper-mode-map "\C-e" 'html-end-of-line)))
#+END_SRC
* Backup control
#+BEGIN_SRC emacs-lisp
  ;; Instea of putting *~ backups in current directory,
  ;; put them in local .saves
  (setq backup-directory-alist `(("." . ".saves")))

  ;; Just to stop spamming backup files
  (setq delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)
#+END_SRC
* Display control
** Hide top bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
(setq linum-format "%4d  ")
(global-linum-mode 1)
#+END_SRC
** Scrolling
 #+BEGIN_SRC emacs-lisp
 (setq redisplay-dont-pause t
       scroll-margin 1
       scroll-step 1
       scroll-conservatively 10000
       scroll-preserve-screen-position 1)
 #+END_SRC
** Silence annoying bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Character limit in Org-Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC
** Pair the braces
#+BEGIN_SRC emacs-lisp
(require 'autopair)
(autopair-global-mode)
#+END_SRC
** Open shell on F1
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f1>") 'shell)
#+END_SRC
** Show Paren Mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0)
#+END_SRC
** Disable validate link in HTML
#+BEGIN_SRC emacs-lisp
(setq org-html-validation-link nil)
#+END_SRC
** Window management
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x <up>") 'windmove-up)
 (global-set-key (kbd "C-x <down>") 'windmove-down)
 (global-set-key (kbd "C-x <left>") 'windmove-left)
 (global-set-key (kbd "C-x <right>") 'windmove-right)
 #+END_SRC
** Go to line preview
#+BEGIN_SRC emacs-lisp
(global-set-key [remap goto-line] 'goto-line-preview)
#+END_SRC
* LSP
#+BEGIN_SRC emacs-lisp
  ;; Give emacs some RAW power, yes
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; Configure LSP-UI by https://emacs-lsp.github.io/lsp-ui/
  ;; Optional - provides fancier overlays.
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
  ;; Sideline options
  (setq lsp-ui-sideline-show-diagnostics t)
  (setq lsp-ui-sideline-show-hover nil)
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-update-mode nil)

  (use-package lsp-mode
    :hook ((go-mode . lsp)
	   (rust-mode . lsp)
	   (c++-mode . lsp)
	   (c-mode . lsp)
	   (js-mode . lsp)
	   (html-mode . lsp)
	   (python-mode . lsp)
	   (haskell-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-pyright
    :ensure t
    :hook (python-mode . (lambda ()
			   (require 'lsp-pyright)
			   (lsp))))  ; or lsp-deferred

  (setq lsp-keymap-prefix "C-c l")

  (global-set-key (kbd"C-c f") 'lsp-find-definition)

  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;; Automatically format code on save
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)

  ;; Optional - provides snippet support.
  (use-package yasnippet
    :ensure t
    :commands yas-minor-mode
    :hook (go-mode . yas-minor-mode))
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  ;; Enable dashboard
  (require 'dashboard)
  ;; Add the hook
  (dashboard-setup-startup-hook)
  ;; Set the dashboard as the default buffer
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
* Magit

  Press =C-x g= to open magit
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
* Modeline theme
#+BEGIN_SRC emacs-lisp
  (require 'doom-modeline)
  (doom-modeline-mode 1)
#+END_SRC
* TRAMP
#+BEGIN_SRC emacs-lisp
  ;; Default to ssh when using tramp
  (setq tramp-default-method "ssh")
#+END_SRC
* M-x Autocomplete
#+BEGIN_SRC emacs-lisp
  ;; Fuzzy command complete on M-x
  (global-set-key (kbd "M-x") 'smex)
#+END_SRC
* Default theme
  #+BEGIN_SRC emacs-lisp
    ;; I like lush and use it by default
    (load-theme 'lush t)
#+END_SRC
* Chef
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("c" "Cookbook" entry (file "~/org/cookbook.org")
         "%(org-chef-get-recipe-from-url)"
         :empty-lines 1)
        ("m" "Manual Cookbook" entry (file "~/org/cookbook.org")
         "* %^{Recipe title: }\n  :PROPERTIES:\n  :source-url:\n  :servings:\n  :prep-time:\n  :cook-time:\n  :ready-in:\n  :END:\n** Ingredients\n   %?\n** Directions\n\n")))
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode))

  ;; Add the Unicode bullets package
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;; ;; This is usually the default, but keep in mind it must be nil
  ;; (setq org-hide-leading-stars nil)
  ;; ;; This line is necessary.
  ;; (setq org-superstar-leading-bullet ?\s)
  ;; Add the new fancy extra org mode blocks
  (add-hook 'org-mode-hook #'org-special-block-extras-mode)
  ;; Add timestamp when marked DONE
  (setq org-log-done 'time)

  ;; Use org-ref
  (setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
  (setenv "PATH" (concat (getenv "PATH") ":/Users/thecsw/Library/Python/3.9/bin"))
  (require 'org)
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-custom-lang-environments
        '(
          (emacs-lisp "common-lispcode")
          ))
  (setq org-latex-minted-options
        '(("frame" "lines")
          ("fontsize" "\\scriptsize")
          ;;   ("linenos" "")
          ("obeytabs" "")
          ("mathescape" "")
          ("numbersep" "5pt")
          ("numbersep" "2mm")
          ("xleftmargin" "0.25in")))

  ;; Build nonstopmode with xelatex
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %b %f"
          "bibtex %b"
          "makeindex %b"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %b %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %b %f"))

  (setq org-src-fontify-natively t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (latex . t)))
#+END_SRC
* Olivetti
#+BEGIN_SRC emacs-lisp
(setq olivetti-body-width 80)
#+END_SRC
* Git messenger
#+BEGIN_SRC emacs-lisp
  ;; Press C-c c to open git-messenge
  (global-set-key (kbd "C-c c") 'git-messenger:popup-message)
  (custom-set-variables
   '(git-messenger:use-magit-popup t))
#+END_SRC
* Emojify
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC
* Ripgrep
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") #'deadgrep)
#+END_SRC
* Anzu search
#+BEGIN_SRC emacs-lisp
  (global-anzu-mode +1)
#+END_SRC
* EMMS
#+BEGIN_SRC emacs-lisp
  (emms-all)
  (emms-default-players)
#+END_SRC
* Artist
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (which-key-mode)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Gemini protocol
#+BEGIN_SRC emacs-lisp
  (add-hook 'gemini-mode-hook '(lambda () (setq fill-column 80)))
  (add-hook 'gemini-mode-hook 'turn-on-auto-fill)
#+END_SRC
* LaTeX in org
#+BEGIN_SRC emacs-lisp
  (setq org-highlight-latex-and-related '(latex script entities))

  (add-to-list 'org-latex-classes
	       '("sandy-article"
		 "\\documentclass[12pt]{article}
  \\usepackage{graphicx}
  \\usepackage{grffile}
  \\usepackage{longtable}
  \\usepackage{wrapfig}
  \\usepackage{rotating}
  \\usepackage[normalem]{ulem}
  \\usepackage{amsmath}
  \\usepackage{textcomp}
  \\usepackage{amssymb}
  \\usepackage{capt-of}
  \\usepackage{hyperref}
  \\usepackage{minted}
  \\usepackage{amsmath}
  \\usepackage{amssymb}
  \\usepackage{setspace}
  \\usepackage{subcaption}
  \\usepackage{mathtools}
  \\usepackage{xfrac}
  \\usepackage[margin=1.25in]{geometry}
  \\usepackage[utf8]{inputenc}
  \\usepackage{color}
  \\usepackage{epsf}
  \\usepackage{tikz}
  \\usepackage{graphicx}
  \\usepackage{pslatex}
  \\usepackage{hyperref}
  \\usepackage[adobe-utopia]{mathdesign}
  \\usepackage{helvet}
  \\renewcommand{\\familydefault}{\\sfdefault}
  \\usepackage{textgreek}
  \\renewcommand*{\\textgreekfontmap}{%
  {phv/*/*}{LGR/neohellenic/*/*}%
  {*/b/n}{LGR/artemisia/b/n}%
  {*/bx/n}{LGR/artemisia/bx/n}%
  {*/*/n}{LGR/artemisia/m/n}%
  {*/b/it}{LGR/artemisia/b/it}%
  {*/bx/it}{LGR/artemisia/bx/it}%
  {*/*/it}{LGR/artemisia/m/it}%
  {*/b/sl}{LGR/artemisia/b/sl}%
  {*/bx/sl}{LGR/artemisia/bx/sl}%
  {*/*/sl}{LGR/artemisia/m/sl}%
  {*/*/sc}{LGR/artemisia/m/sc}%
  {*/*/sco}{LGR/artemisia/m/sco}%
  }
  \\makeatletter
  \\newcommand*{\\rom}[1]{\\expandafter\\@slowromancap\\romannumeral #1@}
  \\makeatother
  \\DeclarePairedDelimiterX{\\infdivx}[2]{(}{)}{%
  #1\\;\\delimsize\\|\\;#2%
  }
  \\newcommand{\\infdiv}{D\\infdivx}
  \\DeclarePairedDelimiter{\\norm}{\\lVert}{\\rVert}
  \\def\\Z{\\mathbb Z}
  \\def\\R{\\mathbb R}
  \\def\\C{\\mathbb C}
  \\def\\N{\\mathbb N}
  \\def\\Q{\\mathbb Q}
  \\def\\noi{\\noindent}
  \\onehalfspace
  \\usemintedstyle{bw}
  [NO-DEFAULT-PACKAGES]
  [NO-PACKAGES]"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC
* Default GUI font
#+BEGIN_SRC emacs-lisp
;;;(set-frame-font "InputMono 10" nil t)
(set-face-attribute 'default nil :height 130)
#+END_SRC
* Syntax highlight
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'global-color-identifiers-mode)
#+END_SRC
* MacOS stuff
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+END_SRC
* Nano
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/nano/")

  (require 'nano-layout)
  (provide 'nano)
#+END_SRC
* Company
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'company
    '(push 'company-robe company-backends))
#+END_SRC
